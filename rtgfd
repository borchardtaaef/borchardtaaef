import com.fasterxml.jackson.databind.ObjectMapper;
import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;
 
import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
 
class  Message{
    public String from;
    public String to;
    public String message;
 
    @Override
    public String toString() {
        return "Message{" +
                "from='" + from + '\'' +
                ", to='" + to + '\'' +
                ", message='" + message + '\'' +
                '}';
    }
}
 
@WebServlet("/message")
public class MessageServlet extends HttpServlet {
    //首先要把一个json转化为java对象
    private ObjectMapper objectMapper=new ObjectMapper();
    //此处把消息保存到内存中（一旦重启服务器，内存数据就会消失了。更科学的做法，应该是保存到数据库里面）
    private List<Message> messageList=new ArrayList<>();
 
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
       //1.需要能够读取请求body,转换成java对象
        Message message=objectMapper.readValue(req.getInputStream(),Message.class);
        //2.得到message之后，需要把message保存到服务器中
        try {
            save(message);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        System.out.println("服务器收到message:"+message.toString());
        //3.返回响应，（其实没啥大必要，主要是返回一个200ok就行，body可以没有）
        resp.setStatus(200);                          //设置成功状态码，会更加清晰
        resp.getWriter().write("ok");
    }
 
    @Override
    protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        List<Message>messageList= null;
        try {
            messageList = load();
        } catch (SQLException e) {
            e.printStackTrace();
        }
 
        //1.把内存中的这些Message，组织成json格式，返回到响应中
       String respJson=objectMapper.writeValueAsString(messageList);
       //这个代码十分关键，告诉浏览器，返回的响应的body是json格式（utf8编码）
       resp.setContentType("application/json; charset=utf8");
       resp.getWriter().write(respJson);
        // 2.针对List/数组这种，jackon会自动把数据整理成json数组，里面每个对象，又会被jsckon转换成{}json对象(json对象属性名字，也是和Message类的成员名字对应的）
 
    }
    private void save(Message message) throws SQLException {
        //通过jdbc从数据库中存储数据。
        DataSource dataSource=new MysqlDataSource();
        //useSSL=false 此处的SSL就是HTTPS中的加密方案
        ((MysqlDataSource) dataSource).setUrl("jdbc:mysql://127.0.0.1:3306/message?characterEncoding=utf8&&useSSL=false");
        ((MysqlDataSource)dataSource).setUser("root");
        ((MysqlDataSource)dataSource).setPassword("lcl15604007179");
        //2.建立链接
        Connection connection=dataSource.getConnection();
        //3.构造SQL
        String sql="insert into messageWall values(?,?,?)";
        PreparedStatement statement=connection.prepareStatement(sql);
        statement.setString(1, message.from);
        statement.setString(2, message.from);
        statement.setString(3, message.from);
        //4.执行SQL
        statement.executeUpdate();
        //5.释放资源，关闭连接
        statement.close();
        connection.close();
    }
    private List<Message> load() throws SQLException {
        //通过jdbc,从数据库读取数据
        //1。创建数据源
        DataSource dataSource=new MysqlDataSource();
        ((MysqlDataSource) dataSource).setUrl("jdbc:mysql://127.0.0.1:3306/message?characterEncoding=utf8&&useSSL=false");
        ((MysqlDataSource) dataSource).setUser("root");
        ((MysqlDataSource)dataSource).setPassword("lcl15604007179");
        //2.建立连接
        Connection connection= dataSource.getConnection();
        //3.构造SQL
        String sql="select *from messageWall";
        PreparedStatement statement=connection.prepareStatement(sql);
        //4.执行SQL
        ResultSet resultSet= statement.executeQuery();
        //5.遍历结果集合
     List <Message> messageList=new ArrayList<>();
     while (resultSet.next()){
         Message message=new Message();
         message.from=resultSet.getString("from");
         message.to=resultSet.getString("to");
         message.message=resultSet.getString("message");
         messageList.add(message);
     }
     //关闭连接，释放资源
        resultSet.close();
        statement.close();
        connection.close();
        return messageList;
 
 
 
    }
 
 
 
 
 
}
