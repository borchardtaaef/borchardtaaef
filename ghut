class Solution {
       public  int[] searchRange(int[] nums, int target) {

        // 定义一个存放起始和终止位置的数组
        int[] ret=new int[]{-1,-1};

    
        // 得到长度
        int len=nums.length;

        // 数组为 空 时 就直接返回
        if(len == 0) return ret;

        // 进行二分操作
        // 定义左右指针
        int left=0,right= len-1;




        /**
         * 寻找左边界
         * 当 right = mid = left 就会陷入死循环
         * 细节一 : 终止条件 不能写等号
         *
         * 当 中点值  <= target 时
         * 细节二 ： 我们更新 left = mid
         *
         * 当 left  mid  right  相邻 时
         *  细节三 ： 更新 mid = left + ( (right - left + 1) >>> 1 )
         *
         */


        //
        while(left < right) {
            int mid=left + ( (right-left) >>> 1);
            if(nums[mid] < target) {
                left = mid+1;
            }  else if(nums[mid] >= target) {
                right = mid ;
            }
        }

        if(nums[right] == target) ret[0] = right;

        left=0;
        right=len-1;




        /**
         * 寻找右边界
         *
         *  当 right = mid = left 就会陷入死循环
         *  细节一 : 循环终止条件 ： 这里不可以进行 取等
         *
         *  当 中点值 >= target  时 进行 right 移动
         *  细节二 : 右指针 right 移动的位置 是 到达  中点下标 mid
         *
         *
         *  left  mid  right
         *  当 中点 和 left  right 相邻 时就需要
         *  细节三 : 确立 mid = left +(  (right - left ) >>> 1 )
         */

        while(left < right) {
            int flg=left + ( (right - left + 1) >>> 1);
            if(nums[flg] <= target) {
                left = flg;
            }  else if(nums[flg] > target) {
                right = flg -1;
            }
        }

        if (nums[left]== target) ret[1]= left;
        return ret;
    }
}
